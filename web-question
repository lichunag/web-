“浏览器是如何解析渲染出一个网站的
1通过DNS解析URL地址，例如http://www.baidu.com
2第一步解析出IP 
3路由：找到IP地址所在的服务器
4打包：文件打包压缩这一步是HTTP协议做的
5浏览器解析HTML文件执行JS脚本

“各种选择器的权重
行内> ID>类>标签


“div的box-sizing
属性有两个内容框与边界盒
一般是内容框>边界框
内容框 content-box：
填充和边框不被包含在定义的宽度和高度之内对象的实际宽度等于设置的宽度值和边界，填充之和，即（元素宽度=宽度+边框+填充）。
此属性表现为标准模式下的盒模型，
边界框 border-box(怪异模式)：
填充和边界被包含在定义的宽度和高度之内。对象的实际宽度就等于设置的宽度值，即使定义有边界和填充也不会改变对象的实际宽度，即（元素宽度=宽度）
此属性表现为怪异模式下的盒模型。

“div框的高度自适应
 当有一个大div包含两个小的div的时候,希望达到一个div的高度随着另一个div的变化而变化
 办法：大div：position：relative;
       小的div：position：absolute；top:0px;bottom：0px;left:根据你的需要设置
       
“使用position让元素达到全屏”      
div>span
如果想让span标签定位在底部，距离顶部10px
div{
position:relative;
}
sapn{
  position:absolute;
  left:0px;
  right:0xp;
  bottom:10px;
}

“对于两栏布局，左边宽度设为定值，右边自适应”
<div>
<span class="left"></span>
<span class="right"></span>
<div>
css:
div{
  position: relative;
}
.left{
   position:absolute;
   top:0px;
   left:0px;
   width:100px;
   backgroung:red;
}
.right{
   position:absolute;
   left:100px;
   right:0px;
   top:0px;
   background:green;
}


       
“对于background的理解
   background-position:
1.关键字, 例如: background-position: top right;
优点: 直观, 可用性高, 各浏览器中表现一致.
缺点: 缺少间隔尺寸. 三个垂直的 (top, center, bottom) 和三个水平的 (left, center, right) 只能为你组合出最多 9 个位置. 不存在其他混式的组合. 并且很难像其他两种数值定位方法一样使用算数进行控制.

2. 像素, 例如: background-position: 0px 0px;
优点: 概念容易被理解, 只要知道如何测量容器左上角和图片左上角之间的距离, 就能准确地推测出图片显示的位置. 像素还能够精确的用数学来控制定位.
缺点: 你必须知道确实的值

3. 百分比, 例如: background-position: 80% 50%;
优点: 可以使用数学来控制定位, 并且比像素定位更加灵活.
缺点: IE 中无法处理复杂的百分比定位. 你可以看看这个测试.

“对于使用position设置元素垂直居中
"使用百分比进行定位
   x = （容器宽-图片宽）*百分比
   y =  (容器高-图片高)*百分比
  div{
  position:absolute;
  left:50%;
  top:50%；
  width:200px;
  height:100px;
  margin-left:-100px;
  margin-top:-50px;
  }
  这个前提是你需要知道，这个div元素的宽高，耦合性比较差。
  改进版：
  div{
  position:absolute;
  width:200px;
  height:100px;
  top:0px;
  left:0px;
  right:0px;
  bottom:0px;
  margin:auto;//这句最为关键

"理解盒子模型
 padding是添加填充的，这个对于一个div中的两个元素很有作用,可以拉开两个元素的距离。
 margin是设置元素之间的间距，这个要预防margin的重合。
  解决margin的方案：在外层加padding，或者外层加border:1px solid red,加绝对定位,外层加overflow:hidden;

“对于vertical-align与line-height”
  对于块级元素的内联元素，由于vertical-align与line-height作用,会有空白节点出现
  1：从vertical-align入手
      由于vertical-align对块级元素无感，可以使用display:block 定位或者浮动
  2：修改line-height 或者height 尽量调小点
  3：从字体大小入手
  
 “对于伪类和伪元素”
 css伪类是用于向某些选择器添加特殊的效果
 css伪元素用于将特殊的效果添加到某些选择器
 相同点：两者都与选择器有关
        再者就是添加一些特殊的效果，这里的特殊是指两者描述了其它css无法描述的东西。
 区别：伪类的效果可以通过添加一个实际的类来达到，而伪元素的效果则需要通过添加一个实际的元素才能达到，
       这也是为什么他们一个称为伪类，一个称为伪元素的原因。
   
  “超出隐藏”
  overflow:hidden;
  white-space:nowrap;
  text-overflow:ellipsis;
  
  “通用的设置样式”
  解决元素周围的高亮边框
 -webkit-tap-highlight-color:transparent;
 使IOS端的input表单元素的表现正常点
 -webkit-appearance:none;
 使元素不触发
 -webkit-touch-callout:none;
 是为了让滑屏更流畅
 -webkit-overflow-scrolling:touch;
使用伪类让控制条消失
::-webkit-scrollbar
*/
*{margin: 0; padding: 0; font-size: 12px; line-height:20px; -webkit-tap-highlight-color:transparent; -webkit-appearance:none; color:#272636;}
body{background-color: #feffff;}
a, img {-webkit-touch-callout: none; }
body{-webkit-overflow-scrolling:touch;}
body::-webkit-scrollbar{width: 0px;}
textarea::-webkit-scrollbar{width: 0px;}
div::-webkit-scrollbar{width:0px;}
a:focus,input:focus,div:focus{-webkit-tap-highlight-color:rgba(0,0,0,0);}
img{display: block; border: none 0; width: 100%;}
input,textarea{border: 0 none; display: block;}
input[type=search] { -webkit-appearance: none; }
::-webkit-search-cancel-button { -webkit-appearance: none; }
::-webkit-search-results-button { -webkit-appearance: none; }
.d-block{display: block;}
.d-none{display: none;}
.v-none{visibility: hidden;}
/*文字和li重置*/
h1,h2,h3,h4,h5,h6{font-weight: normal;}
a{text-decoration: none;}
li{list-style: none;}
/*浮动和定位*/
.fl{float: left;}
.fr{float: right;}
.clear:after {clear:both;visibility:hidden;content:"";display:block;}
.rel{position: relative;}
.abs{position: absolute;}
 /* 共同样式结束 */

/* 图片变灰 */
    filter:grayscale(100%); 
    -webkit-filter:grayscale(100%); 
/* 关于各种库的引用*/
  由于浏览器对js的解析顺序，是从上到下，如果你的js引入的位置不对会造成找不到js文件，导致该有的效果显示不出来。
/* 关于css的text-indent:2em; 代表首行缩进2em *、
